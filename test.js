const shades = require('./index');
describe('shades', () => {
  it('should generate 50 shades of grey', () => {
    expect(shades({ r: 10, g: 10, b: 10 }, 50)).toEqual([
      'rgb(0,0,0)',
      'rgb(5, 5, 5)',
      'rgb(10, 10, 10)',
      'rgb(16, 16, 16)',
      'rgb(21, 21, 21)',
      'rgb(26, 26, 26)',
      'rgb(31, 31, 31)',
      'rgb(36, 36, 36)',
      'rgb(42, 42, 42)',
      'rgb(47, 47, 47)',
      'rgb(52, 52, 52)',
      'rgb(57, 57, 57)',
      'rgb(62, 62, 62)',
      'rgb(68, 68, 68)',
      'rgb(73, 73, 73)',
      'rgb(78, 78, 78)',
      'rgb(83, 83, 83)',
      'rgb(88, 88, 88)',
      'rgb(94, 94, 94)',
      'rgb(99, 99, 99)',
      'rgb(104, 104, 104)',
      'rgb(109, 109, 109)',
      'rgb(114, 114, 114)',
      'rgb(120, 120, 120)',
      'rgb(125, 125, 125)',
      'rgb(130, 130, 130)',
      'rgb(135, 135, 135)',
      'rgb(141, 141, 141)',
      'rgb(146, 146, 146)',
      'rgb(151, 151, 151)',
      'rgb(156, 156, 156)',
      'rgb(161, 161, 161)',
      'rgb(167, 167, 167)',
      'rgb(172, 172, 172)',
      'rgb(177, 177, 177)',
      'rgb(182, 182, 182)',
      'rgb(187, 187, 187)',
      'rgb(193, 193, 193)',
      'rgb(198, 198, 198)',
      'rgb(203, 203, 203)',
      'rgb(208, 208, 208)',
      'rgb(213, 213, 213)',
      'rgb(219, 219, 219)',
      'rgb(224, 224, 224)',
      'rgb(229, 229, 229)',
      'rgb(234, 234, 234)',
      'rgb(239, 239, 239)',
      'rgb(245, 245, 245)',
      'rgb(250, 250, 250)',
      'rgb(255, 255, 255)',
    ]);
  });
});
